/* vim: ft=cpp : */
//BEGIN MSG_VARIANT_PARAMETERS
#include <iostream>
using namespace std;
void msg()
{
};

template <typename T, typename... V>
void  msg( const T& a , const V& ... args)
{
    cout << a ;
    msg(args...);
}


//END MSG_VARIANT_PARAMETERS
//BEGIN GLUT_MAKE
INCDIRS=-I/usr/include
LIBDIRS=-lGL -lGLU -l3ds -lglut
CC=gcc
CFLAGS=-Wall
LIBS=-lX11 -lXi -lXmu -lglut -lGL -lGLU -lm
a:a.cpp
	$(CC) a.cpp -o a $(INCDIRS) $(LIBDIRS) $(CFLAGS)
	
//END GLUT_MAKE
//BEGIN COUT_VECTOR
#include <ostream>
#include <iterator>
template <typename T>
void operator << (ostream& os,vector<T>& v)
{
    typedef ostream_iterator<T> oter;
    oter ot(os,"\n");
    copy(v.begin(),v.end(),ot);
};
//END COUT_VECTOR
//BEGIN BINARY
template <unsigned long N>
struct binary {
    static unsigned const value = binary<N/10>::value * 2 + N%10;
};
template <>
struct binary<0> {
    static unsigned const value = 0;
};
//END BINARY
//BEGIN MAIN_STD_EMPTY
#include <iostream>
using namespace std;
int main()
{
    return 0;
}
//END MAIN_STD_EMPTY
//BEGIN GLUT_MAIN
#include <GL/freeglut.h>
#include <GL/gl.h>
void on_time(int timer_id)
{
    glutTimerFunc(20,on_time,0);
}
void on_special(int event,int x, int y)
{
}
void on_display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    //glCullFace(GL_BACK);
    //glEnable(GL_CULL_FACE);
    //glEnable(GL_DEPTH);
    //glEnable(GL_POLYGON_SMOOTH);
    glutSwapBuffers();
}
void on_mouse(int button,int action,int x, int y)
{
}
void on_mouseMotion(int x , int y)
{
}
void on_reshape(int w, int h)
{
    glViewport(0,0,w,h);
}
void init()
{
}
int main(int argc , char** argv)
{
    glutInit(&argc,argv);
    glutSetOption(GLUT_ACTION_ON_WINDOW_CLOSE, GLUT_ACTION_GLUTMAINLOOP_RETURNS);
    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGBA);
    glutInitWindowSize(800, 600);
    glutCreateWindow("title");
    // functions
    glutDisplayFunc(on_display);
    glutReshapeFunc(on_reshape);
    glutMouseFunc(on_mouse);
    glutMotionFunc(on_mouseMotion);
    //glutPassiveMotionFunc(on_mouseMotion);
    glutSpecialFunc(on_special);
    glutTimerFunc(50,on_time,0);
    if (GLEW_OK != err){
        printf("GLEW Error:%s\n",glewGetErrorString(err));
        return 1;
    }
    init();
    glutMainLoop();
    return 0;
}
//END GLUT_MAIN
